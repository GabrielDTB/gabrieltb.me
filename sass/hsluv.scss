// The MIT License (MIT)
// Copyright (c) 2021 Andrii Savchenko
// Copyright (C) 2016 Cameron Little, Alexei Boronine

// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

@use 'sass:map';
@use 'sass:math';

//// Constants
$_m: (
  r: (
    3.240969941904521,
    -1.537383177570093,
    -0.498610760293,
  ),
  g: (
    -0.96924363628087,
    1.87596750150772,
    0.041555057407175,
  ),
  b: (
    0.055630079696993,
    -0.20397695888897,
    1.056971514242878,
  ),
);

$_ref-u: 0.19783000664283;
$_ref-v: 0.46831999493879;

$_kappa: 903.2962962;
$_epsilon: 0.0088564516;

//// rgb
@function _from-xyz($xyz) {
  $tuple: (map.get($xyz, "x"), map.get($xyz, "y"), map.get($xyz, "z"));

  $r: _dot-product(map.get($_m, "r"), $tuple);
  $g: _dot-product(map.get($_m, "g"), $tuple);
  $b: _dot-product(map.get($_m, "b"), $tuple);

  @return (
    "r": math.round(_from-linear($r) * 255),
    "g": math.round(_from-linear($g) * 255),
    "b": math.round(_from-linear($b) * 255)
  );
}

@function _from-linear($c) {
  @return if(
    $c <= 0.0031308,
    12.92 * $c,
    1.055 * math.pow($c, math.div(1, 2.4)) - 0.055
  );
}

@function _dot-product($a, $b) {
  $ret: nth($a, 1) * nth($b, 1);
  $ret: $ret + nth($a, 2) * nth($b, 2);
  $ret: $ret + nth($a, 3) * nth($b, 3);

  @return $ret;
}

//// luv
@function _from-lch($lch) {
  $l: map.get($lch, "l");
  $c: map.get($lch, "c");
  $h: map.get($lch, "h");

  @return ("l": $l, "u": math.cos($h) * $c, "v": math.sin($h) * $c);
}

//// lch
@function _from-hsluv($hsluv) {
  $h: map.get($hsluv, "h");
  $s: map.get($hsluv, "s");
  $l: map.get($hsluv, "l");

  $c: 0;
  @if not($l > 99.9999999 or $l < 0.00000001) {
    $_max: _max-chroma-for-l-h($l, $h);
    $c: math.div($_max, 100) * $s;
  }

  @return ("l": $l, "c": $c, "h": $h);
}


@function _max-chroma-for-l-h($l, $h) {
  $lengths: ();

  @each $line in _get-bounds($l) {
    $l: _length-of-ray-until-intersect($h, $line);
    @if $l != null {
      $lengths: append($lengths, $l);
    }
  }

  @return min($lengths...);
}

@function _get-bounds($l) {
  $sub1: math.div(math.pow($l + 16, 3), 1560896);
  $sub2: if($sub1 > $_epsilon, $sub1, math.div($l, $_kappa));
  $ret: ();
  @each $channel in (r, g, b) {
    $_m_: map.get($_m, $channel);
    $_m1: nth($_m_, 1);
    $_m2: nth($_m_, 2);
    $_m3: nth($_m_, 3);
    @for $t from 0 through 1 {
      $top1: (284517 * $_m1 - 94839 * $_m3) * $sub2;
      $top2: (838422 * $_m3 + 769860 * $_m2 + 731718 * $_m1) *
        $l *
        $sub2 -
        769860 *
        $t *
        $l;
      $bottom: (632260 * $_m3 - 126452 * $_m2) * $sub2 + 126452 * $t;

      $ret: append($ret, (math.div($top1, $bottom), math.div($top2, $bottom)));
    }
  }

  @return $ret;
}

@function _length-of-ray-until-intersect($theta, $line) {
  $_m1: nth($line, 1);
  $b1: nth($line, 2);
  $len: math.div($b1, math.sin($theta) - $_m1 * math.cos($theta));

  @return if($len < 0, null, $len);
}

//// xyz
@function _from-luv($luv) {
  $l: map.get($luv, "l");
  $u: map.get($luv, "u");
  $v: map.get($luv, "v");

  @if $l == 0 {
    @return ("x": 0, "y": 0, "z": 0);
  }

  $var-u: math.div($u, 13 * $l) + $_ref-u;
  $var-v: math.div($v, 13 * $l) + $_ref-v;

  $y: _l-to-y($l);
  $x: 0 - math.div(9 * $y * $var-u, ($var-u - 4) * $var-v - $var-u * $var-v);
  $z: math.div(9 * $y - (15 * $var-v * $y) - ($var-v * $x), 3 * $var-v);

  @return ("x": $x, "y": $y, "z": $z);
}

@function _l-to-y($l) {
  @if $l <= 8 {
    @return math.div($l, $_kappa);
  } @else {
    @return math.pow(math.div($l + 16, 116), 3);
  }
}

//// conversions
@function _args-hsl($hue, $saturation, $lightness) {
  $hsl: $hue;

  @if ($saturation and $lightness) {
    @if unitless($hue) {
      $hue: $hue * 1deg;
    }
    @if unit($saturation) == "%" {
      $saturation: math.div($saturation, 1%);
    }
    @if unit($lightness) == "%" {
      $lightness: math.div($lightness, 1%);
    }

    $hsl: (
      h: $hue,
      s: $saturation,
      l: $lightness,
    );
  } @else if (type-of($value: $hsl) != map) {
    @error "hsluv function with a single parameter must be called with a map of the form (h: $hue, s: $saturation, l: $lightness)";
  } @else if not (map.get($hsl, h) and map.get($hsl, s) and map.get($hsl, l)) {
    @error "hsluv function with a single parameter must be called with a map of the form (h: $hue, s: $saturation, l: $lightness)";
  }

  @return $hsl;
}

@function _hsluv-rgb($hsluv) {
  $lch: _from-hsluv($hsluv);
  $luv: _from-lch($lch);
  $xyz: _from-luv($luv);
  $rgb: _from-xyz($xyz);

  @return $rgb;
}

@function hsluv($hue, $saturation: null, $lightness: null, $alpha: 1) {
  $hsluv: _args-hsl($hue, $saturation, $lightness);
  $rgb: _hsluv-rgb($hsluv);

  @if $alpha == 1 {
    @return rgb(
      map-get($rgb, "r"), 
      map-get($rgb, "g"), 
      map-get($rgb, "b")
    );
  }
  @else {
    @return rgba(
      map-get($rgb, "r"),
      map-get($rgb, "g"),
      map-get($rgb, "b"),
      $alpha
    );
  }
}